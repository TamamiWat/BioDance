// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CalcParticlePosition

struct Particle
{
    float3 position;
    float4 color;
    float scale;
};

//GPU -> CPU
RWStructuredBuffer<Particle> _Particle; 
RWStructuredBuffer<float3> _ParticleVelocity;

//CPU -> GPU
float _Range;
float _DeltaTime;


[numthreads(64,1,1)]
void CalcParticlePosition(uint id : SV_DISPATCHTHREADID)
{
    // TODO: insert actual code here!
    float3 pos = _Particle[id].position + _ParticleVelocity[id] * _DeltaTime;
    
    
    if (abs(pos.x) > _Range)
    {
        _ParticleVelocity[id].x *= -1;
        pos.x = _Particle[id].position.x + _ParticleVelocity[id].x * _DeltaTime;
    }

    if (abs(pos.y) > _Range)
    {
        _ParticleVelocity[id].y *= -1;
        pos.y = _Particle[id].position.y + _ParticleVelocity[id].y * _DeltaTime;
    }

    if (abs(pos.z) > _Range)
    {
        _ParticleVelocity[id].z *= -1;
        pos.z = _Particle[id].position.z + _ParticleVelocity[id].z * _DeltaTime;
    }

    _Particle[id].position = pos;
    
}
