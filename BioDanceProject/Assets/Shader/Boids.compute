// カーネル関数を指定
#pragma kernel SteerForceCalculator      //Steer Force
#pragma kernel MotionCalculator  //Velocity, Position
#define SIMULATION_BLOCK_SIZE 256 //Size of thread group's thread


struct BoidData
{
	float3 velocity;
	float3 position;
};

/*
**Buffer Definition
*/
//Boids Data Buffer
StructuredBuffer<BoidData>   _BoidDataBufferRead;
RWStructuredBuffer<BoidData> _BoidDataBufferWrite;
//Boids Steer Force Buffer
StructuredBuffer<float3>     _BoidForceBufferRead;
RWStructuredBuffer<float3>   _BoidForceBufferWrite;

/**
***From CPU
**/
int _MaxBoidObjectNum; 

float _DeltaTime;      //Elapsed time from previous frame

//Distance from other objects
float _SeparateNeighborhoodRadius;  //Cohesion
float _AlignmentNeighborhoodRadius; //Alignment
float _CohesionNeighborhoodRadius;  //Separate

float _MaxSpeed;        //Max Speed
float _MaxSteerForce;   //Max Steer Force
float _MinSpeed; //Min Speed

//Weights
float _SeparationWeight;  //Cohesion
float _AlignmentWeight; //Alignment
float _CohesionWeight;  //Separate
float  _AvoidFrameWeight; //Weight for avoiding frame

//Angle with other object
float _CohesionAngle; //Cohesion
float _AlignmentAngle; //Alignment
float _SeparationAngle; //Separate

float4 _FrameCenter;      //center position of frame
float4 _FrameSize;        //frame size

float _FrameRadius; //Sphere Frame Radius

//User Position
float3 _TapPos;
float3 _DragPos;

/**
***Functions
**/
//limit vector size
float3 limit(float3 vec, float max)
{
    float length = sqrt(dot(vec, vec)); //norm : size of vector
    return (length > max && length > 0) ? vec.xyz * (max / length) : vec.xyz;
}

float3 limitVelocity(float3 vec, float max, float min)
{
    float length = sqrt(dot(vec, vec));//norm : size of vector
    if(length < min)
    {
        vec = vec.xyz * (min / length);
    }
    else if(length > max)
    {
        vec = vec.xyz * (max / length);
    }

    return vec;
}

float3 limitBoundry(float3 pos)
{
    float3 repulsion = float3(0, 0, 0);
    float distFromCenter = length(pos);
	float3 vec = normalize(pos);

	//Apply repulsive force only if farther from the center than _FrameRadius
    if (distFromCenter > _FrameRadius)
    {
		float strength = distFromCenter - _FrameRadius; 
		if(abs(pos.x) > _FrameRadius * sin(45))
		{
			repulsion.x = (pos.x > 0) ? -strength : strength;
		}
		if(abs(pos.y) > _FrameRadius * sin(45))
		{
			repulsion.y = (pos.y > 0) ? -strength : strength;
		}
		if(abs(pos.z) > _FrameRadius * sin(45))
		{
			repulsion.z = (pos.z > 0) ? -strength : strength;
		}
        
        return repulsion;
    }

    return repulsion;
}

//shared memory
groupshared BoidData boid_data[SIMULATION_BLOCK_SIZE];

/*
**SteerForceCalculator
*/
[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void SteerForceCalculator
(
	uint3 id : SV_DispatchThreadID, //Unique ID for the entire thread
	uint3 Gid : SV_GroupID,           
	uint3 GTid : SV_GroupThreadID,    
	uint  GIndex : SV_GroupIndex      //GroupThreadID in one dimension
)
{
	const unsigned int P_ID = id.x; 
	float3 self_Position = _BoidDataBufferRead[P_ID].position; //position of myself
	float3 self_Velocity = _BoidDataBufferRead[P_ID].velocity; //velocity of myself

	float3 force = float3(0, 0, 0); //init steer force
	
    //counts
    int sepCount = 0; //separation
    int aliCount = 0; //alignment
    int cohCount = 0; //cohesion

    //force result
    float3 sepDirSum = float3(0, 0, 0);//separation
    float3 aliVelSum = float3(0, 0, 0);//alignment
    float3 cohPosSum = float3(0, 0, 0);//cohesion

	
	[loop]
	for (uint N_block_ID = 0; N_block_ID < (uint)_MaxBoidObjectNum;
									N_block_ID += SIMULATION_BLOCK_SIZE)
	{
		//Storage Boids data in shared memory (Size : SIMULATION_BLOCK_SIZE) 
		boid_data[GIndex] = _BoidDataBufferRead[N_block_ID + GIndex];

        //Block execution all threds in a group 
        //until all threads in a group reach this call 
        //after sompleting all group shared access
        GroupMemoryBarrierWithGroupSync();

		//calculation with other objects
		for (int N_other_ID = 0; N_other_ID < SIMULATION_BLOCK_SIZE; N_other_ID++)
		{
			if ((unsigned int)N_other_ID == P_ID) continue;

			float3 other_position = boid_data[N_other_ID].position; //other object position
			float3 other_velocity = boid_data[N_other_ID].velocity; //other object velocity

			float3 diff = self_Position - other_position;
			float distance = length(diff);
			float angle = acos(dot(normalize(self_Velocity), normalize(diff)));

			//Separation
			if (distance > 0.0 && distance < _SeparateNeighborhoodRadius && angle < _SeparationAngle)
			{
				float3 direction = self_Position - other_position;
				direction /= distance; //Reduce the impact of distant objects
				sepDirSum += direction; 
				sepCount++;    
			}

			//Alignment
			if (distance > 0.0 && distance < _AlignmentNeighborhoodRadius && angle < _AlignmentAngle)
			{
				aliVelSum += other_velocity; 
				aliCount++;            
			}

			//Cohesion
			if (distance > 0.0 && distance< _CohesionNeighborhoodRadius  && angle < _CohesionAngle)
			{
				cohPosSum += other_position; 
				cohCount++;             
			}
		}
		GroupMemoryBarrierWithGroupSync();
	}

	//Separation
	float3 sepForce = (float3)0.0;
	if (sepCount > 0)
	{
		sepForce = sepDirSum;
		sepForce = normalize(sepForce) * _MaxSpeed; 
		sepForce = sepForce - self_Velocity;           
		sepForce = limit(sepForce, _MaxSteerForce);
		sepForce *= _SeparationWeight;
	}
	

	//Alignment
	float3 aliForce = (float3)0.0;
	if (aliCount > 0)
	{
		aliForce = aliVelSum / (float)aliCount;     // Find the average of the speeds of the nearest individuals.
		aliForce = normalize(aliForce) * _MaxSpeed; 
		aliForce = aliForce - self_Velocity;           
		aliForce = limit(aliForce, _MaxSteerForce); 
		aliForce *= _AlignmentWeight;
	}
	

	//Cohesion
	float3 cohForce = (float3)0.0;
	if (cohCount > 0)
	{
		cohForce = cohPosSum / (float)cohCount;    // Find the average of the positions of the nearest individuals.
		cohForce = normalize(cohForce) * _MaxSpeed;
		cohForce = cohForce - self_Velocity;         
		cohForce = limit(cohForce, _MaxSteerForce); 
		cohForce *= _CohesionWeight;		
	}
	

	force = sepForce + aliForce + cohForce;

	_BoidForceBufferWrite[P_ID] = force; //update steer force
}

/*
**MotionCalculator
*/
[numthreads(SIMULATION_BLOCK_SIZE, 1, 1)]
void MotionCalculator
(
	uint3 id : SV_DispatchThreadID 
)
{
	const unsigned int P_ID = id.x;          //get index
											           
	BoidData currentData = _BoidDataBufferWrite[P_ID];   //read current Boids Data
	float3 force = _BoidForceBufferRead[P_ID]; //read steer force
	
	force += limitBoundry(currentData.position) * _AvoidFrameWeight;

	currentData.velocity += force * _DeltaTime;          //apply steer force to velocity
	currentData.velocity = limitVelocity(currentData.velocity, _MaxSpeed, _MinSpeed); 
		//limit velocity
	currentData.position += currentData.velocity * _DeltaTime;     //update position
											           
	_BoidDataBufferWrite[P_ID] = currentData;           //update Boids data
}